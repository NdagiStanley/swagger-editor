// eslint-disable-next-line
export const context = {
  useRxJava: true,
  parent: [],
  appVersion: '1.0.0',
  generatorClass: 'io.swagger.codegen.v3.generators.java.JavaClientCodegen',
  supportJava6: false,
  sortParamsByRequiredFlag: true,
  groupId: 'io.swagger',
  invokerPackage: 'io.swagger.client',
  apiFolder: 'io/swagger/client/api',
  developerEmail: 'apiteam@swagger.io',
  authMethods: [
    {
      vendorExtensions: {
        'x-is-key-in-header': true,
        'x-has-more': true,
        'x-is-api-key': true,
        'x-is-key-in-query': false,
      },
      name: 'api_key',
      type: 'apiKey',
      keyParamName: 'api_key',
      isKeyInQuery: false,
      hasScopes: false,
      isBasic: false,
      isBearer: false,
      isOAuth: false,
      isApiKey: true,
      isKeyInHeader: true,
      isCode: false,
      isPassword: false,
      isApplication: false,
      isImplicit: false,
      isInteger: false,
      isNumber: false,
      hasHeaders: false,
      isString: false,
      isNumeric: false,
      isLong: false,
      isFloat: false,
      isDouble: false,
      isByteArray: false,
      isBoolean: false,
      isDate: false,
      isDateTime: false,
      isUuid: false,
      isDefault: false,
      isMapContainer: false,
      isListContainer: false,
      isMultipart: false,
      isResponseBinary: false,
      isResponseFile: false,
      isBinary: false,
      isFile: false,
      isEnum: false,
      isArrayModel: false,
      isAlias: false,
      isPrimitiveType: false,
      isObject: false,
      hasInnerObject: false,
      isContainer: false,
      isNotContainer: false,
      isReadOnly: false,
      isNullable: false,
      isCollectionFormatMulti: false,
      hasMore: true,
    },
    {
      vendorExtensions: {
        'x-has-more': false,
        'x-is-oauth': true,
        'x-is-implicit': true,
      },
      name: 'petstore_auth',
      type: 'oauth2',
      flow: 'implicit',
      authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog',
      scopes: {
        'write:pets': 'modify pets in your account',
        'read:pets': 'read your pets',
      },
      isKeyInQuery: false,
      hasScopes: true,
      isBasic: false,
      isBearer: false,
      isOAuth: true,
      isApiKey: false,
      isKeyInHeader: false,
      isCode: false,
      isPassword: false,
      isApplication: false,
      isImplicit: true,
      isInteger: false,
      isNumber: false,
      hasHeaders: false,
      isString: false,
      isNumeric: false,
      isLong: false,
      isFloat: false,
      isDouble: false,
      isByteArray: false,
      isBoolean: false,
      isDate: false,
      isDateTime: false,
      isUuid: false,
      isDefault: false,
      isMapContainer: false,
      isListContainer: false,
      isMultipart: false,
      isResponseBinary: false,
      isResponseFile: false,
      isBinary: false,
      isFile: false,
      isEnum: false,
      isArrayModel: false,
      isAlias: false,
      isPrimitiveType: false,
      isObject: false,
      hasInnerObject: false,
      isContainer: false,
      isNotContainer: false,
      isReadOnly: false,
      isNullable: false,
      isCollectionFormatMulti: false,
      hasMore: false,
    },
  ],
  generateModelDocs: true,
  generateModelTests: true,
  generateApiTests: true,
  usePlayWS: false,
  serializableModel: false,
  playVersion: 'play25',
  inputSpec:
    '{\n  "openapi" : "3.0.0",\n  "info" : {\n    "title" : "Swagger Petstore",\n    "description" : "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\\"http://swagger.io\\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \\"special-key\\" to test the authorization filters",\n    "termsOfService" : "http://helloreverb.com/terms/",\n    "contact" : {\n      "email" : "apiteam@wordnik.com"\n    },\n    "license" : {\n      "name" : "Apache-2.0",\n      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"\n    },\n    "version" : "1.0.0"\n  },\n  "servers" : [ {\n    "url" : "http://petstore.swagger.io/v2"\n  } ],\n  "paths" : {\n    "/pet" : {\n      "put" : {\n        "tags" : [ "pet" ],\n        "summary" : "Update an existing pet",\n        "operationId" : "updatePet",\n        "requestBody" : {\n          "description" : "Pet object that needs to be added to the store",\n          "content" : {\n            "application/json" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            },\n            "application/xml" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Pet not found"\n          },\n          "405" : {\n            "description" : "Validation exception"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      },\n      "post" : {\n        "tags" : [ "pet" ],\n        "summary" : "Add a new pet to the store",\n        "operationId" : "addPet",\n        "requestBody" : {\n          "description" : "Pet object that needs to be added to the store",\n          "content" : {\n            "application/json" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            },\n            "application/xml" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "405" : {\n            "description" : "Invalid input"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/findByStatus" : {\n      "get" : {\n        "tags" : [ "pet" ],\n        "summary" : "Finds Pets by status",\n        "description" : "Multiple status values can be provided with comma separated strings",\n        "operationId" : "findPetsByStatus",\n        "parameters" : [ {\n          "name" : "status",\n          "in" : "query",\n          "description" : "Status values that need to be considered for filter",\n          "schema" : {\n            "type" : "array",\n            "items" : {\n              "type" : "string",\n              "enum" : [ "available", "pending", "sold" ]\n            },\n            "default" : "available"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid status value"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/findByTags" : {\n      "get" : {\n        "tags" : [ "pet" ],\n        "summary" : "Finds Pets by tags",\n        "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",\n        "operationId" : "findPetsByTags",\n        "parameters" : [ {\n          "name" : "tags",\n          "in" : "query",\n          "description" : "Tags to filter by",\n          "schema" : {\n            "type" : "array",\n            "items" : {\n              "type" : "string"\n            }\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid tag value"\n          }\n        },\n        "deprecated" : true,\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/{petId}" : {\n      "get" : {\n        "tags" : [ "pet" ],\n        "summary" : "Find pet by ID",\n        "description" : "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",\n        "operationId" : "getPetById",\n        "parameters" : [ {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "ID of pet that needs to be fetched",\n          "required" : true,\n          "schema" : {\n            "type" : "integer",\n            "format" : "int64"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Pet"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Pet"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Pet not found"\n          }\n        },\n        "security" : [ {\n          "api_key" : [ ]\n        }, {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      },\n      "post" : {\n        "tags" : [ "pet" ],\n        "summary" : "Updates a pet in the store with form data",\n        "operationId" : "updatePetWithForm",\n        "parameters" : [ {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "ID of pet that needs to be updated",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "requestBody" : {\n          "content" : {\n            "application/x-www-form-urlencoded" : {\n              "schema" : {\n                "properties" : {\n                  "name" : {\n                    "type" : "string",\n                    "description" : "Updated name of the pet"\n                  },\n                  "status" : {\n                    "type" : "string",\n                    "description" : "Updated status of the pet"\n                  }\n                }\n              }\n            }\n          }\n        },\n        "responses" : {\n          "405" : {\n            "description" : "Invalid input"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      },\n      "delete" : {\n        "tags" : [ "pet" ],\n        "summary" : "Deletes a pet",\n        "operationId" : "deletePet",\n        "parameters" : [ {\n          "name" : "api_key",\n          "in" : "header",\n          "schema" : {\n            "type" : "string"\n          }\n        }, {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "Pet id to delete",\n          "required" : true,\n          "schema" : {\n            "type" : "integer",\n            "format" : "int64"\n          }\n        } ],\n        "responses" : {\n          "400" : {\n            "description" : "Invalid pet value"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/{petId}/uploadImage" : {\n      "post" : {\n        "tags" : [ "pet" ],\n        "summary" : "uploads an image",\n        "operationId" : "uploadFile",\n        "parameters" : [ {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "ID of pet to update",\n          "required" : true,\n          "schema" : {\n            "type" : "integer",\n            "format" : "int64"\n          }\n        } ],\n        "requestBody" : {\n          "content" : {\n            "multipart/form-data" : {\n              "schema" : {\n                "properties" : {\n                  "additionalMetadata" : {\n                    "type" : "string",\n                    "description" : "Additional data to pass to server"\n                  },\n                  "file" : {\n                    "type" : "string",\n                    "description" : "file to upload",\n                    "format" : "binary"\n                  }\n                }\n              }\n            }\n          }\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/store/inventory" : {\n      "get" : {\n        "tags" : [ "store" ],\n        "summary" : "Returns pet inventories by status",\n        "description" : "Returns a map of status codes to quantities",\n        "operationId" : "getInventory",\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "object",\n                  "additionalProperties" : {\n                    "type" : "integer",\n                    "format" : "int32"\n                  }\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "object",\n                  "additionalProperties" : {\n                    "type" : "integer",\n                    "format" : "int32"\n                  }\n                }\n              }\n            }\n          }\n        },\n        "security" : [ {\n          "api_key" : [ ]\n        } ]\n      }\n    },\n    "/store/order" : {\n      "post" : {\n        "tags" : [ "store" ],\n        "summary" : "Place an order for a pet",\n        "operationId" : "placeOrder",\n        "requestBody" : {\n          "description" : "order placed for purchasing the pet",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Order"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid Order"\n          }\n        }\n      }\n    },\n    "/store/order/{orderId}" : {\n      "get" : {\n        "tags" : [ "store" ],\n        "summary" : "Find purchase order by ID",\n        "description" : "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",\n        "operationId" : "getOrderById",\n        "parameters" : [ {\n          "name" : "orderId",\n          "in" : "path",\n          "description" : "ID of pet that needs to be fetched",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Order not found"\n          }\n        }\n      },\n      "delete" : {\n        "tags" : [ "store" ],\n        "summary" : "Delete purchase order by ID",\n        "description" : "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",\n        "operationId" : "deleteOrder",\n        "parameters" : [ {\n          "name" : "orderId",\n          "in" : "path",\n          "description" : "ID of the order that needs to be deleted",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Order not found"\n          }\n        }\n      }\n    },\n    "/user" : {\n      "post" : {\n        "tags" : [ "user" ],\n        "summary" : "Create user",\n        "description" : "This can only be done by the logged in user.",\n        "operationId" : "createUser",\n        "requestBody" : {\n          "description" : "Created user object",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/User"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/createWithArray" : {\n      "post" : {\n        "tags" : [ "user" ],\n        "summary" : "Creates list of users with given input array",\n        "operationId" : "createUsersWithArrayInput",\n        "requestBody" : {\n          "description" : "List of user object",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "type" : "array",\n                "items" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/createWithList" : {\n      "post" : {\n        "tags" : [ "user" ],\n        "summary" : "Creates list of users with given input array",\n        "operationId" : "createUsersWithListInput",\n        "requestBody" : {\n          "description" : "List of user object",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "type" : "array",\n                "items" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/login" : {\n      "get" : {\n        "tags" : [ "user" ],\n        "summary" : "Logs user into the system",\n        "operationId" : "loginUser",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "query",\n          "description" : "The user name for login",\n          "schema" : {\n            "type" : "string"\n          }\n        }, {\n          "name" : "password",\n          "in" : "query",\n          "description" : "The password for login in clear text",\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "string"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "string"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid username/password supplied"\n          }\n        }\n      }\n    },\n    "/user/logout" : {\n      "get" : {\n        "tags" : [ "user" ],\n        "summary" : "Logs out current logged in user session",\n        "operationId" : "logoutUser",\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/{username}" : {\n      "get" : {\n        "tags" : [ "user" ],\n        "summary" : "Get user by user name",\n        "operationId" : "getUserByName",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "path",\n          "description" : "The name that needs to be fetched. Use user1 for testing. ",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid username supplied"\n          },\n          "404" : {\n            "description" : "User not found"\n          }\n        }\n      },\n      "put" : {\n        "tags" : [ "user" ],\n        "summary" : "Updated user",\n        "description" : "This can only be done by the logged in user.",\n        "operationId" : "updateUser",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "path",\n          "description" : "name that need to be deleted",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "requestBody" : {\n          "description" : "Updated user object",\n          "content" : {\n            "application/json" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/User"\n              }\n            },\n            "application/xml" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/User"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "400" : {\n            "description" : "Invalid user supplied"\n          },\n          "404" : {\n            "description" : "User not found"\n          }\n        }\n      },\n      "delete" : {\n        "tags" : [ "user" ],\n        "summary" : "Delete user",\n        "description" : "This can only be done by the logged in user.",\n        "operationId" : "deleteUser",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "path",\n          "description" : "The name that needs to be deleted",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "400" : {\n            "description" : "Invalid username supplied"\n          },\n          "404" : {\n            "description" : "User not found"\n          }\n        }\n      }\n    }\n  },\n  "components" : {\n    "schemas" : {\n      "Order" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "petId" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "quantity" : {\n            "type" : "integer",\n            "format" : "int32"\n          },\n          "shipDate" : {\n            "type" : "string",\n            "format" : "date-time"\n          },\n          "status" : {\n            "type" : "string",\n            "description" : "Order Status",\n            "enum" : [ "placed", "approved", "delivered" ]\n          },\n          "complete" : {\n            "type" : "boolean"\n          }\n        },\n        "xml" : {\n          "name" : "Order"\n        }\n      },\n      "User" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "username" : {\n            "type" : "string"\n          },\n          "firstName" : {\n            "type" : "string"\n          },\n          "lastName" : {\n            "type" : "string"\n          },\n          "email" : {\n            "type" : "string"\n          },\n          "password" : {\n            "type" : "string"\n          },\n          "phone" : {\n            "type" : "string"\n          },\n          "userStatus" : {\n            "type" : "integer",\n            "description" : "User Status",\n            "format" : "int32"\n          }\n        },\n        "xml" : {\n          "name" : "User"\n        }\n      },\n      "Category" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "name" : {\n            "type" : "string"\n          }\n        },\n        "xml" : {\n          "name" : "Category"\n        }\n      },\n      "Tag" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "name" : {\n            "type" : "string"\n          }\n        },\n        "xml" : {\n          "name" : "Tag"\n        }\n      },\n      "Pet" : {\n        "required" : [ "name", "photoUrls" ],\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "category" : {\n            "$ref" : "#/components/schemas/Category"\n          },\n          "name" : {\n            "type" : "string"\n          },\n          "photoUrls" : {\n            "type" : "array",\n            "xml" : {\n              "name" : "photoUrl",\n              "wrapped" : true\n            },\n            "items" : {\n              "type" : "string"\n            }\n          },\n          "tags" : {\n            "type" : "array",\n            "xml" : {\n              "name" : "tag",\n              "wrapped" : true\n            },\n            "items" : {\n              "$ref" : "#/components/schemas/Tag"\n            }\n          },\n          "status" : {\n            "type" : "string",\n            "description" : "pet status in the store",\n            "enum" : [ "available", "pending", "sold" ]\n          }\n        },\n        "xml" : {\n          "name" : "Pet"\n        }\n      }\n    },\n    "securitySchemes" : {\n      "petstore_auth" : {\n        "type" : "oauth2",\n        "flows" : {\n          "implicit" : {\n            "authorizationUrl" : "http://petstore.swagger.io/api/oauth/dialog",\n            "scopes" : {\n              "write:pets" : "modify pets in your account",\n              "read:pets" : "read your pets"\n            }\n          }\n        }\n      },\n      "api_key" : {\n        "type" : "apiKey",\n        "name" : "api_key",\n        "in" : "header"\n      }\n    }\n  }\n}',
  host: 'petstore.swagger.io',
  artifactUrl: 'https://github.com/swagger-api/swagger-codegen',
  developerOrganization: 'Swagger',
  models: [
    {
      schema: {
        properties: {
          id: {
            type: 'integer',
            format: 'int64',
          },
          name: {
            type: 'string',
          },
        },
        example: {
          name: 'name',
          id: 6,
        },
        xml: {
          name: 'Category',
        },
      },
      importPath: 'io.swagger.client.model.Category',
      model: {
        vendorExtensions: {
          'x-is-alias': false,
          'x-is-nullable': false,
          'x-has-only-read-only': false,
          'x-has-more-models': true,
          'x-has-optional': true,
          'x-has-vars': true,
          'x-has-required': false,
          'x-has-enums': false,
        },
        name: 'Category',
        classname: 'Category',
        classVarName: 'category',
        modelJson:
          '{\n  "properties" : {\n    "id" : {\n      "type" : "integer",\n      "format" : "int64"\n    },\n    "name" : {\n      "type" : "string"\n    }\n  },\n  "xml" : {\n    "name" : "Category"\n  }\n}',
        dataType: 'Object',
        xmlName: 'Category',
        classFilename: 'Category',
        vars: [
          {
            vendorExtensions: {
              'x-is-numeric': true,
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-has-more': true,
              'x-has-more-non-read-only': true,
              'x-is-long': true,
            },
            baseName: 'id',
            getter: 'getId',
            setter: 'setId',
            datatype: 'Long',
            datatypeWithEnum: 'Long',
            dataFormat: 'int64',
            name: 'id',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.id;',
            baseType: 'Long',
            jsonSchema: '{\n  "type" : "integer",\n  "format" : "int64"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Id',
            iexclusiveMaximum: false,
            moreNonReadOnly: true,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: false,
            isNumeric: true,
            isLong: true,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: true,
          },
          {
            vendorExtensions: {
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-is-string': true,
            },
            baseName: 'name',
            getter: 'getName',
            setter: 'setName',
            datatype: 'String',
            datatypeWithEnum: 'String',
            name: 'name',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.name;',
            baseType: 'String',
            jsonSchema: '{\n  "type" : "string"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Name',
            iexclusiveMaximum: false,
            moreNonReadOnly: false,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: true,
            isNumeric: false,
            isLong: false,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: false,
          },
        ],
        requiredVars: [],
        optionalVars: [
          {
            vendorExtensions: {
              'x-is-numeric': true,
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-has-more': true,
              'x-has-more-non-read-only': true,
              'x-is-long': true,
            },
            baseName: 'id',
            getter: 'getId',
            setter: 'setId',
            datatype: 'Long',
            datatypeWithEnum: 'Long',
            dataFormat: 'int64',
            name: 'id',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.id;',
            baseType: 'Long',
            jsonSchema: '{\n  "type" : "integer",\n  "format" : "int64"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Id',
            iexclusiveMaximum: false,
            moreNonReadOnly: true,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: false,
            isNumeric: true,
            isLong: true,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: true,
          },
          {
            vendorExtensions: {
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-is-string': true,
            },
            baseName: 'name',
            getter: 'getName',
            setter: 'setName',
            datatype: 'String',
            datatypeWithEnum: 'String',
            name: 'name',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.name;',
            baseType: 'String',
            jsonSchema: '{\n  "type" : "string"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Name',
            iexclusiveMaximum: false,
            moreNonReadOnly: false,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: true,
            isNumeric: false,
            isLong: false,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: false,
          },
        ],
        readOnlyVars: [],
        readWriteVars: [
          {
            vendorExtensions: {
              'x-is-numeric': true,
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-has-more': true,
              'x-has-more-non-read-only': true,
              'x-is-long': true,
            },
            baseName: 'id',
            getter: 'getId',
            setter: 'setId',
            datatype: 'Long',
            datatypeWithEnum: 'Long',
            dataFormat: 'int64',
            name: 'id',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.id;',
            baseType: 'Long',
            jsonSchema: '{\n  "type" : "integer",\n  "format" : "int64"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Id',
            iexclusiveMaximum: false,
            moreNonReadOnly: true,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: false,
            isNumeric: true,
            isLong: true,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: true,
          },
          {
            vendorExtensions: {
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-is-string': true,
            },
            baseName: 'name',
            getter: 'getName',
            setter: 'setName',
            datatype: 'String',
            datatypeWithEnum: 'String',
            name: 'name',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.name;',
            baseType: 'String',
            jsonSchema: '{\n  "type" : "string"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Name',
            iexclusiveMaximum: false,
            moreNonReadOnly: false,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: true,
            isNumeric: false,
            isLong: false,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: false,
          },
        ],
        allVars: [
          {
            vendorExtensions: {
              'x-is-numeric': true,
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-has-more': true,
              'x-has-more-non-read-only': true,
              'x-is-long': true,
            },
            baseName: 'id',
            getter: 'getId',
            setter: 'setId',
            datatype: 'Long',
            datatypeWithEnum: 'Long',
            dataFormat: 'int64',
            name: 'id',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.id;',
            baseType: 'Long',
            jsonSchema: '{\n  "type" : "integer",\n  "format" : "int64"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Id',
            iexclusiveMaximum: false,
            moreNonReadOnly: true,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: false,
            isNumeric: true,
            isLong: true,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: true,
          },
          {
            vendorExtensions: {
              'x-is-nullable': false,
              'x-is-not-container': true,
              'x-is-primitive-type': true,
              'x-is-string': true,
            },
            baseName: 'name',
            getter: 'getName',
            setter: 'setName',
            datatype: 'String',
            datatypeWithEnum: 'String',
            name: 'name',
            defaultValue: 'null',
            defaultValueWithParam: ' = data.name;',
            baseType: 'String',
            jsonSchema: '{\n  "type" : "string"\n}',
            exclusiveMinimum: false,
            exclusiveMaximum: false,
            required: false,
            secondaryParam: false,
            nullable: false,
            nameInCamelCase: 'Name',
            iexclusiveMaximum: false,
            moreNonReadOnly: false,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: true,
            isNumeric: false,
            isLong: false,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: true,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: true,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: false,
          },
        ],
        parentVars: [],
        mandatory: [],
        allMandatory: [],
        imports: ['JsonProperty', 'JsonValue', 'Schema'],
        emptyVars: false,
        isComposedModel: false,
        hasVars: true,
        hasOnlyReadOnly: false,
        hasMoreModels: true,
        hasEnums: false,
        hasRequired: false,
        hasOptional: true,
        hasChildren: false,
        isInteger: false,
        isNumber: false,
        subtypeName: 'Category',
        hasHeaders: false,
        isString: false,
        isNumeric: false,
        isLong: false,
        isFloat: false,
        isDouble: false,
        isByteArray: false,
        isBoolean: false,
        isDate: false,
        isDateTime: false,
        isUuid: false,
        isDefault: false,
        isMapContainer: false,
        isListContainer: false,
        isMultipart: false,
        isResponseBinary: false,
        isResponseFile: false,
        isBinary: false,
        isFile: false,
        isEnum: false,
        isArrayModel: false,
        isAlias: false,
        isPrimitiveType: false,
        isObject: false,
        hasInnerObject: false,
        isContainer: false,
        isNotContainer: false,
        isReadOnly: false,
        isNullable: false,
        isCollectionFormatMulti: false,
        hasMore: false,
      },
    },
  ],
  fullJavaUtil: false,
  appDescription:
    'This is a sample server Petstore server.  You can find out more about Swagger at <a href=\\"http://swagger.io\\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \\"special-key\\" to test the authorization filters',
  contextPath: '/v2',
  hasAuthMethods: true,
  javaUtilPrefix: '',
  licenseName: 'Unlicense',
  releaseNote: 'Minor update',
  java11: false,
  version: '1.0.0',
  apiInfo: {
    apis: [
      {
        useRxJava: true,
        parent: [],
        appVersion: '1.0.0',
        generatorClass: 'io.swagger.codegen.v3.generators.java.JavaClientCodegen',
        supportJava6: false,
        sortParamsByRequiredFlag: true,
        groupId: 'io.swagger',
        hasMore: 'true',
        invokerPackage: 'io.swagger.client',
        classVarName: 'store',
        authMethods: [
          {
            vendorExtensions: {
              'x-is-key-in-header': true,
              'x-has-more': true,
              'x-is-api-key': true,
              'x-is-key-in-query': false,
            },
            name: 'api_key',
            type: 'apiKey',
            keyParamName: 'api_key',
            isKeyInQuery: false,
            hasScopes: false,
            isBasic: false,
            isBearer: false,
            isOAuth: false,
            isApiKey: true,
            isKeyInHeader: true,
            isCode: false,
            isPassword: false,
            isApplication: false,
            isImplicit: false,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: false,
            isNumeric: false,
            isLong: false,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: false,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: false,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: true,
          },
          {
            vendorExtensions: {
              'x-has-more': false,
              'x-is-oauth': true,
              'x-is-implicit': true,
            },
            name: 'petstore_auth',
            type: 'oauth2',
            flow: 'implicit',
            authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog',
            scopes: {
              'write:pets': 'modify pets in your account',
              'read:pets': 'read your pets',
            },
            isKeyInQuery: false,
            hasScopes: true,
            isBasic: false,
            isBearer: false,
            isOAuth: true,
            isApiKey: false,
            isKeyInHeader: false,
            isCode: false,
            isPassword: false,
            isApplication: false,
            isImplicit: true,
            isInteger: false,
            isNumber: false,
            hasHeaders: false,
            isString: false,
            isNumeric: false,
            isLong: false,
            isFloat: false,
            isDouble: false,
            isByteArray: false,
            isBoolean: false,
            isDate: false,
            isDateTime: false,
            isUuid: false,
            isDefault: false,
            isMapContainer: false,
            isListContainer: false,
            isMultipart: false,
            isResponseBinary: false,
            isResponseFile: false,
            isBinary: false,
            isFile: false,
            isEnum: false,
            isArrayModel: false,
            isAlias: false,
            isPrimitiveType: false,
            isObject: false,
            hasInnerObject: false,
            isContainer: false,
            isNotContainer: false,
            isReadOnly: false,
            isNullable: false,
            isCollectionFormatMulti: false,
            hasMore: false,
          },
        ],
        developerEmail: 'apiteam@swagger.io',
        generateModelDocs: true,
        hasImport: true,
        generateModelTests: true,
        generateApiTests: true,
        classFilename: 'StoreApi',
        usePlayWS: false,
        serializableModel: false,
        playVersion: 'play25',
        inputSpec:
          '{\n  "openapi" : "3.0.0",\n  "info" : {\n    "title" : "Swagger Petstore",\n    "description" : "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\\"http://swagger.io\\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \\"special-key\\" to test the authorization filters",\n    "termsOfService" : "http://helloreverb.com/terms/",\n    "contact" : {\n      "email" : "apiteam@wordnik.com"\n    },\n    "license" : {\n      "name" : "Apache-2.0",\n      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"\n    },\n    "version" : "1.0.0"\n  },\n  "servers" : [ {\n    "url" : "http://petstore.swagger.io/v2"\n  } ],\n  "paths" : {\n    "/pet" : {\n      "put" : {\n        "tags" : [ "pet" ],\n        "summary" : "Update an existing pet",\n        "operationId" : "updatePet",\n        "requestBody" : {\n          "description" : "Pet object that needs to be added to the store",\n          "content" : {\n            "application/json" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            },\n            "application/xml" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Pet not found"\n          },\n          "405" : {\n            "description" : "Validation exception"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      },\n      "post" : {\n        "tags" : [ "pet" ],\n        "summary" : "Add a new pet to the store",\n        "operationId" : "addPet",\n        "requestBody" : {\n          "description" : "Pet object that needs to be added to the store",\n          "content" : {\n            "application/json" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            },\n            "application/xml" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Pet"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "405" : {\n            "description" : "Invalid input"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/findByStatus" : {\n      "get" : {\n        "tags" : [ "pet" ],\n        "summary" : "Finds Pets by status",\n        "description" : "Multiple status values can be provided with comma separated strings",\n        "operationId" : "findPetsByStatus",\n        "parameters" : [ {\n          "name" : "status",\n          "in" : "query",\n          "description" : "Status values that need to be considered for filter",\n          "schema" : {\n            "type" : "array",\n            "items" : {\n              "type" : "string",\n              "enum" : [ "available", "pending", "sold" ]\n            },\n            "default" : "available"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid status value"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/findByTags" : {\n      "get" : {\n        "tags" : [ "pet" ],\n        "summary" : "Finds Pets by tags",\n        "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",\n        "operationId" : "findPetsByTags",\n        "parameters" : [ {\n          "name" : "tags",\n          "in" : "query",\n          "description" : "Tags to filter by",\n          "schema" : {\n            "type" : "array",\n            "items" : {\n              "type" : "string"\n            }\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "array",\n                  "items" : {\n                    "$ref" : "#/components/schemas/Pet"\n                  }\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid tag value"\n          }\n        },\n        "deprecated" : true,\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/{petId}" : {\n      "get" : {\n        "tags" : [ "pet" ],\n        "summary" : "Find pet by ID",\n        "description" : "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",\n        "operationId" : "getPetById",\n        "parameters" : [ {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "ID of pet that needs to be fetched",\n          "required" : true,\n          "schema" : {\n            "type" : "integer",\n            "format" : "int64"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Pet"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Pet"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Pet not found"\n          }\n        },\n        "security" : [ {\n          "api_key" : [ ]\n        }, {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      },\n      "post" : {\n        "tags" : [ "pet" ],\n        "summary" : "Updates a pet in the store with form data",\n        "operationId" : "updatePetWithForm",\n        "parameters" : [ {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "ID of pet that needs to be updated",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "requestBody" : {\n          "content" : {\n            "application/x-www-form-urlencoded" : {\n              "schema" : {\n                "properties" : {\n                  "name" : {\n                    "type" : "string",\n                    "description" : "Updated name of the pet"\n                  },\n                  "status" : {\n                    "type" : "string",\n                    "description" : "Updated status of the pet"\n                  }\n                }\n              }\n            }\n          }\n        },\n        "responses" : {\n          "405" : {\n            "description" : "Invalid input"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      },\n      "delete" : {\n        "tags" : [ "pet" ],\n        "summary" : "Deletes a pet",\n        "operationId" : "deletePet",\n        "parameters" : [ {\n          "name" : "api_key",\n          "in" : "header",\n          "schema" : {\n            "type" : "string"\n          }\n        }, {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "Pet id to delete",\n          "required" : true,\n          "schema" : {\n            "type" : "integer",\n            "format" : "int64"\n          }\n        } ],\n        "responses" : {\n          "400" : {\n            "description" : "Invalid pet value"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/pet/{petId}/uploadImage" : {\n      "post" : {\n        "tags" : [ "pet" ],\n        "summary" : "uploads an image",\n        "operationId" : "uploadFile",\n        "parameters" : [ {\n          "name" : "petId",\n          "in" : "path",\n          "description" : "ID of pet to update",\n          "required" : true,\n          "schema" : {\n            "type" : "integer",\n            "format" : "int64"\n          }\n        } ],\n        "requestBody" : {\n          "content" : {\n            "multipart/form-data" : {\n              "schema" : {\n                "properties" : {\n                  "additionalMetadata" : {\n                    "type" : "string",\n                    "description" : "Additional data to pass to server"\n                  },\n                  "file" : {\n                    "type" : "string",\n                    "description" : "file to upload",\n                    "format" : "binary"\n                  }\n                }\n              }\n            }\n          }\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        },\n        "security" : [ {\n          "petstore_auth" : [ "write:pets", "read:pets" ]\n        } ]\n      }\n    },\n    "/store/inventory" : {\n      "get" : {\n        "tags" : [ "store" ],\n        "summary" : "Returns pet inventories by status",\n        "description" : "Returns a map of status codes to quantities",\n        "operationId" : "getInventory",\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "object",\n                  "additionalProperties" : {\n                    "type" : "integer",\n                    "format" : "int32"\n                  }\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "object",\n                  "additionalProperties" : {\n                    "type" : "integer",\n                    "format" : "int32"\n                  }\n                }\n              }\n            }\n          }\n        },\n        "security" : [ {\n          "api_key" : [ ]\n        } ]\n      }\n    },\n    "/store/order" : {\n      "post" : {\n        "tags" : [ "store" ],\n        "summary" : "Place an order for a pet",\n        "operationId" : "placeOrder",\n        "requestBody" : {\n          "description" : "order placed for purchasing the pet",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/Order"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid Order"\n          }\n        }\n      }\n    },\n    "/store/order/{orderId}" : {\n      "get" : {\n        "tags" : [ "store" ],\n        "summary" : "Find purchase order by ID",\n        "description" : "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",\n        "operationId" : "getOrderById",\n        "parameters" : [ {\n          "name" : "orderId",\n          "in" : "path",\n          "description" : "ID of pet that needs to be fetched",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/Order"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Order not found"\n          }\n        }\n      },\n      "delete" : {\n        "tags" : [ "store" ],\n        "summary" : "Delete purchase order by ID",\n        "description" : "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",\n        "operationId" : "deleteOrder",\n        "parameters" : [ {\n          "name" : "orderId",\n          "in" : "path",\n          "description" : "ID of the order that needs to be deleted",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "400" : {\n            "description" : "Invalid ID supplied"\n          },\n          "404" : {\n            "description" : "Order not found"\n          }\n        }\n      }\n    },\n    "/user" : {\n      "post" : {\n        "tags" : [ "user" ],\n        "summary" : "Create user",\n        "description" : "This can only be done by the logged in user.",\n        "operationId" : "createUser",\n        "requestBody" : {\n          "description" : "Created user object",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/User"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/createWithArray" : {\n      "post" : {\n        "tags" : [ "user" ],\n        "summary" : "Creates list of users with given input array",\n        "operationId" : "createUsersWithArrayInput",\n        "requestBody" : {\n          "description" : "List of user object",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "type" : "array",\n                "items" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/createWithList" : {\n      "post" : {\n        "tags" : [ "user" ],\n        "summary" : "Creates list of users with given input array",\n        "operationId" : "createUsersWithListInput",\n        "requestBody" : {\n          "description" : "List of user object",\n          "content" : {\n            "*/*" : {\n              "schema" : {\n                "type" : "array",\n                "items" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/login" : {\n      "get" : {\n        "tags" : [ "user" ],\n        "summary" : "Logs user into the system",\n        "operationId" : "loginUser",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "query",\n          "description" : "The user name for login",\n          "schema" : {\n            "type" : "string"\n          }\n        }, {\n          "name" : "password",\n          "in" : "query",\n          "description" : "The password for login in clear text",\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "type" : "string"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "type" : "string"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid username/password supplied"\n          }\n        }\n      }\n    },\n    "/user/logout" : {\n      "get" : {\n        "tags" : [ "user" ],\n        "summary" : "Logs out current logged in user session",\n        "operationId" : "logoutUser",\n        "responses" : {\n          "default" : {\n            "description" : "successful operation"\n          }\n        }\n      }\n    },\n    "/user/{username}" : {\n      "get" : {\n        "tags" : [ "user" ],\n        "summary" : "Get user by user name",\n        "operationId" : "getUserByName",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "path",\n          "description" : "The name that needs to be fetched. Use user1 for testing. ",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "200" : {\n            "description" : "successful operation",\n            "content" : {\n              "application/json" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              },\n              "application/xml" : {\n                "schema" : {\n                  "$ref" : "#/components/schemas/User"\n                }\n              }\n            }\n          },\n          "400" : {\n            "description" : "Invalid username supplied"\n          },\n          "404" : {\n            "description" : "User not found"\n          }\n        }\n      },\n      "put" : {\n        "tags" : [ "user" ],\n        "summary" : "Updated user",\n        "description" : "This can only be done by the logged in user.",\n        "operationId" : "updateUser",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "path",\n          "description" : "name that need to be deleted",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "requestBody" : {\n          "description" : "Updated user object",\n          "content" : {\n            "application/json" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/User"\n              }\n            },\n            "application/xml" : {\n              "schema" : {\n                "$ref" : "#/components/schemas/User"\n              }\n            }\n          },\n          "required" : false\n        },\n        "responses" : {\n          "400" : {\n            "description" : "Invalid user supplied"\n          },\n          "404" : {\n            "description" : "User not found"\n          }\n        }\n      },\n      "delete" : {\n        "tags" : [ "user" ],\n        "summary" : "Delete user",\n        "description" : "This can only be done by the logged in user.",\n        "operationId" : "deleteUser",\n        "parameters" : [ {\n          "name" : "username",\n          "in" : "path",\n          "description" : "The name that needs to be deleted",\n          "required" : true,\n          "schema" : {\n            "type" : "string"\n          }\n        } ],\n        "responses" : {\n          "400" : {\n            "description" : "Invalid username supplied"\n          },\n          "404" : {\n            "description" : "User not found"\n          }\n        }\n      }\n    }\n  },\n  "components" : {\n    "schemas" : {\n      "Order" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "petId" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "quantity" : {\n            "type" : "integer",\n            "format" : "int32"\n          },\n          "shipDate" : {\n            "type" : "string",\n            "format" : "date-time"\n          },\n          "status" : {\n            "type" : "string",\n            "description" : "Order Status",\n            "enum" : [ "placed", "approved", "delivered" ]\n          },\n          "complete" : {\n            "type" : "boolean"\n          }\n        },\n        "xml" : {\n          "name" : "Order"\n        }\n      },\n      "User" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "username" : {\n            "type" : "string"\n          },\n          "firstName" : {\n            "type" : "string"\n          },\n          "lastName" : {\n            "type" : "string"\n          },\n          "email" : {\n            "type" : "string"\n          },\n          "password" : {\n            "type" : "string"\n          },\n          "phone" : {\n            "type" : "string"\n          },\n          "userStatus" : {\n            "type" : "integer",\n            "description" : "User Status",\n            "format" : "int32"\n          }\n        },\n        "xml" : {\n          "name" : "User"\n        }\n      },\n      "Category" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "name" : {\n            "type" : "string"\n          }\n        },\n        "xml" : {\n          "name" : "Category"\n        }\n      },\n      "Tag" : {\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "name" : {\n            "type" : "string"\n          }\n        },\n        "xml" : {\n          "name" : "Tag"\n        }\n      },\n      "Pet" : {\n        "required" : [ "name", "photoUrls" ],\n        "properties" : {\n          "id" : {\n            "type" : "integer",\n            "format" : "int64"\n          },\n          "category" : {\n            "$ref" : "#/components/schemas/Category"\n          },\n          "name" : {\n            "type" : "string"\n          },\n          "photoUrls" : {\n            "type" : "array",\n            "xml" : {\n              "name" : "photoUrl",\n              "wrapped" : true\n            },\n            "items" : {\n              "type" : "string"\n            }\n          },\n          "tags" : {\n            "type" : "array",\n            "xml" : {\n              "name" : "tag",\n              "wrapped" : true\n            },\n            "items" : {\n              "$ref" : "#/components/schemas/Tag"\n            }\n          },\n          "status" : {\n            "type" : "string",\n            "description" : "pet status in the store",\n            "enum" : [ "available", "pending", "sold" ]\n          }\n        },\n        "xml" : {\n          "name" : "Pet"\n        }\n      }\n    },\n    "securitySchemes" : {\n      "petstore_auth" : {\n        "type" : "oauth2",\n        "flows" : {\n          "implicit" : {\n            "authorizationUrl" : "http://petstore.swagger.io/api/oauth/dialog",\n            "scopes" : {\n              "write:pets" : "modify pets in your account",\n              "read:pets" : "read your pets"\n            }\n          }\n        }\n      },\n      "api_key" : {\n        "type" : "apiKey",\n        "name" : "api_key",\n        "in" : "header"\n      }\n    }\n  }\n}',
        artifactUrl: 'https://github.com/swagger-api/swagger-codegen',
        developerOrganization: 'Swagger',
        baseName: 'Store',
        package: 'io.swagger.client.api',
        imports: [
          {
            import: 'io.swagger.client.model.Order',
          },
        ],
        fullJavaUtil: false,
        hasAuthMethods: true,
        contextPath: '/v2',
        appDescription:
          'This is a sample server Petstore server.  You can find out more about Swagger at <a href=\\"http://swagger.io\\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \\"special-key\\" to test the authorization filters',
        javaUtilPrefix: '',
        licenseName: 'Unlicense',
        releaseNote: 'Minor update',
        java11: false,
        version: '1.0.0',
        modelDocPath: 'docs/',
        useOas2: false,
        withXml: false,
        scmDeveloperConnection: 'scm:git:git@github.com:swagger-api/swagger-codegen.git',
        importPath: 'io.swagger.client.api.Store',
        licenseUrl: 'http://www.apache.org/licenses/LICENSE-2.0.html',
        jsr310: 'true',
        generatedYear: '2024',
        modelPackage: 'io.swagger.client.model',
        apiDocPath: 'docs/',
        licenseInfo: 'Apache-2.0',
        hasModel: true,
        basePathWithoutHost: '/v2',
        parcelableModel: false,
        developerOrganizationUrl: 'http://swagger.io',
        operations: {
          classname: 'StoreApi',
          operation: [
            {
              vendorExtensions: {
                'x-has-consumes': false,
                'x-accepts': '',
                'x-has-required-params': true,
                'x-is-restful-show': false,
                'x-is-restful-index': false,
                'x-is-delete-method': true,
                'x-is-restful-destroy': false,
                'x-has-params': true,
                'x-contentType': 'application/json',
                'x-has-optional-params': false,
                'x-is-restful': false,
                'x-is-restful-update': false,
                'x-has-produces': false,
                'x-is-restful-create': false,
              },
              responseHeaders: [],
              returnTypeIsPrimitive: false,
              returnSimpleType: false,
              subresourceOperation: false,
              path: '/store/order/{orderId}',
              operationId: 'deleteOrder',
              httpMethod: 'DELETE',
              summary: 'Delete purchase order by ID',
              unescapedNotes:
                'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors',
              notes:
                'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors',
              baseName: 'Store',
              testPath: '/store/order/orderId_example',
              contents: [
                {
                  parameters: [
                    {
                      vendorExtensions: {
                        'x-is-nullable': false,
                        'x-is-primitive-type': true,
                        'x-is-path-param': true,
                        'x-has-more': false,
                        'x-is-string': true,
                      },
                      secondaryParam: false,
                      baseName: 'orderId',
                      paramName: 'orderId',
                      dataType: 'String',
                      description: 'ID of the order that needs to be deleted',
                      unescapedDescription: 'ID of the order that needs to be deleted',
                      example: '"orderId_example"',
                      testExample: 'orderId_example',
                      jsonSchema:
                        '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of the order that needs to be deleted",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                      nullable: false,
                      isJson: false,
                      required: true,
                      exclusiveMaximum: false,
                      exclusiveMinimum: false,
                      uniqueItems: false,
                      isFormParam: false,
                      isQueryParam: false,
                      isPathParam: true,
                      isHeaderParam: false,
                      isCookieParam: false,
                      isBodyParam: false,
                      notFile: true,
                      isInteger: false,
                      isNumber: false,
                      hasHeaders: false,
                      isString: true,
                      isNumeric: false,
                      isLong: false,
                      isFloat: false,
                      isDouble: false,
                      isByteArray: false,
                      isBoolean: false,
                      isDate: false,
                      isDateTime: false,
                      isUuid: false,
                      isDefault: false,
                      isMapContainer: false,
                      isListContainer: false,
                      isMultipart: false,
                      isResponseBinary: false,
                      isResponseFile: false,
                      isBinary: false,
                      isFile: false,
                      isEnum: false,
                      isArrayModel: false,
                      isAlias: false,
                      isPrimitiveType: true,
                      isObject: false,
                      hasInnerObject: false,
                      isContainer: false,
                      isNotContainer: false,
                      isReadOnly: false,
                      isNullable: false,
                      isCollectionFormatMulti: false,
                      hasMore: false,
                    },
                  ],
                  contentExtensions: {},
                  isForm: false,
                },
              ],
              allParams: [
                {
                  vendorExtensions: {
                    'x-is-nullable': false,
                    'x-is-primitive-type': true,
                    'x-is-path-param': true,
                    'x-has-more': false,
                    'x-is-string': true,
                  },
                  secondaryParam: false,
                  baseName: 'orderId',
                  paramName: 'orderId',
                  dataType: 'String',
                  description: 'ID of the order that needs to be deleted',
                  unescapedDescription: 'ID of the order that needs to be deleted',
                  example: '"orderId_example"',
                  testExample: 'orderId_example',
                  jsonSchema:
                    '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of the order that needs to be deleted",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                  nullable: false,
                  isJson: false,
                  required: true,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: true,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: false,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: true,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              bodyParams: [],
              pathParams: [
                {
                  vendorExtensions: {
                    'x-has-more': false,
                    'x-is-nullable': false,
                    'x-is-string': true,
                    'x-is-primitive-type': true,
                    'x-is-path-param': true,
                  },
                  secondaryParam: false,
                  baseName: 'orderId',
                  paramName: 'orderId',
                  dataType: 'String',
                  description: 'ID of the order that needs to be deleted',
                  unescapedDescription: 'ID of the order that needs to be deleted',
                  example: '"orderId_example"',
                  testExample: 'orderId_example',
                  jsonSchema:
                    '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of the order that needs to be deleted",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                  nullable: false,
                  isJson: false,
                  required: true,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: true,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: false,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: true,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              queryParams: [],
              headerParams: [],
              cookieParams: [],
              formParams: [],
              requiredParams: [
                {
                  vendorExtensions: {
                    'x-has-more': false,
                    'x-is-nullable': false,
                    'x-is-string': true,
                    'x-is-primitive-type': true,
                    'x-is-path-param': true,
                  },
                  secondaryParam: false,
                  baseName: 'orderId',
                  paramName: 'orderId',
                  dataType: 'String',
                  description: 'ID of the order that needs to be deleted',
                  unescapedDescription: 'ID of the order that needs to be deleted',
                  example: '"orderId_example"',
                  testExample: 'orderId_example',
                  jsonSchema:
                    '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of the order that needs to be deleted",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                  nullable: false,
                  isJson: false,
                  required: true,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: true,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: false,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: true,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              tags: [
                {
                  name: 'store',
                },
              ],
              responses: [
                {
                  vendorExtensions: {
                    'x-is-map-container': false,
                    'x-has-headers': false,
                    'x-is-primitive-type': true,
                    'x-has-more': true,
                    'x-is-simple-type': true,
                    'x-is-default': false,
                    'x-is-list-container': false,
                  },
                  headers: [],
                  code: '400',
                  message: 'Invalid ID supplied',
                  contents: [],
                  jsonSchema: '{\n  "description" : "Invalid ID supplied"\n}',
                  primitiveType: true,
                  wildcard: false,
                  simpleType: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: true,
                },
                {
                  vendorExtensions: {
                    'x-is-map-container': false,
                    'x-has-headers': false,
                    'x-is-primitive-type': true,
                    'x-has-more': false,
                    'x-is-simple-type': true,
                    'x-is-default': false,
                    'x-is-list-container': false,
                  },
                  headers: [],
                  code: '404',
                  message: 'Order not found',
                  contents: [],
                  jsonSchema: '{\n  "description" : "Order not found"\n}',
                  primitiveType: true,
                  wildcard: false,
                  simpleType: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              imports: [],
              nickname: 'deleteOrder',
              operationIdLowerCase: 'deleteorder',
              operationIdCamelCase: 'DeleteOrder',
              operationIdSnakeCase: 'delete_order',
              isRestfulShow: false,
              isRestfulIndex: false,
              isRestfulCreate: false,
              isRestfulUpdate: false,
              isRestfulDestroy: false,
              isRestful: false,
              hasBodyParam: false,
              isDeprecated: false,
              hasAuthMethods: false,
              hasConsumes: false,
              hasProduces: false,
              hasParams: true,
              hasOptionalParams: false,
              hasRequiredParams: true,
              hasReference: false,
              hasQueryParams: false,
              hasHeaderParams: false,
              hasCookieParams: false,
              hasPathParams: true,
              hasFormParams: false,
              hasExamples: false,
              isBodyAllowed: false,
              isInteger: false,
              isNumber: false,
              hasHeaders: false,
              isString: false,
              isNumeric: false,
              isLong: false,
              isFloat: false,
              isDouble: false,
              isByteArray: false,
              isBoolean: false,
              isDate: false,
              isDateTime: false,
              isUuid: false,
              isDefault: false,
              isMapContainer: false,
              isListContainer: false,
              isMultipart: false,
              isResponseBinary: false,
              isResponseFile: false,
              isBinary: false,
              isFile: false,
              isEnum: false,
              isArrayModel: false,
              isAlias: false,
              isPrimitiveType: false,
              isObject: false,
              hasInnerObject: false,
              isContainer: false,
              isNotContainer: false,
              isReadOnly: false,
              isNullable: false,
              isCollectionFormatMulti: false,
              hasMore: false,
            },
            {
              vendorExtensions: {
                'x-has-consumes': false,
                'x-accepts': 'application/json',
                'x-has-required-params': false,
                'x-is-restful-show': false,
                'x-is-get-method': true,
                'x-has-reference': false,
                'x-is-restful-index': false,
                'x-is-restful-destroy': false,
                'x-has-optional-params': false,
                'x-is-restful': false,
                'x-is-restful-update': false,
                'x-is-map-container': true,
                'x-has-auth-methods': true,
                'x-has-produces': true,
                'x-is-restful-create': false,
              },
              responseHeaders: [],
              returnTypeIsPrimitive: true,
              returnSimpleType: false,
              subresourceOperation: false,
              path: '/store/inventory',
              operationId: 'getInventory',
              returnType: 'Map<String, Integer>',
              httpMethod: 'GET',
              returnBaseType: 'Integer',
              returnContainer: 'map',
              summary: 'Returns pet inventories by status',
              unescapedNotes: 'Returns a map of status codes to quantities',
              notes: 'Returns a map of status codes to quantities',
              baseName: 'Store',
              defaultResponse: 'new HashMap<String, Integer>()',
              testPath: '/store/inventory',
              produces: [
                {
                  hasMore: 'true',
                  mediaType: 'application/json',
                },
                {
                  mediaType: 'application/xml',
                },
              ],
              contents: [
                {
                  parameters: [],
                  contentExtensions: {},
                  isForm: false,
                },
              ],
              allParams: [],
              bodyParams: [],
              pathParams: [],
              queryParams: [],
              headerParams: [],
              cookieParams: [],
              formParams: [],
              requiredParams: [],
              authMethods: [
                {
                  vendorExtensions: {
                    'x-is-key-in-header': true,
                    'x-has-more': false,
                    'x-is-api-key': true,
                    'x-is-key-in-query': false,
                  },
                  name: 'api_key',
                  type: 'apiKey',
                  keyParamName: 'api_key',
                  isKeyInQuery: false,
                  hasScopes: false,
                  isBasic: false,
                  isBearer: false,
                  isOAuth: false,
                  isApiKey: true,
                  isKeyInHeader: true,
                  isCode: false,
                  isPassword: false,
                  isApplication: false,
                  isImplicit: false,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: false,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              tags: [
                {
                  name: 'store',
                },
              ],
              responses: [
                {
                  vendorExtensions: {
                    'x-is-map-container': true,
                    'x-has-headers': false,
                    'x-is-primitive-type': false,
                    'x-has-more': false,
                    'x-is-simple-type': false,
                    'x-is-default': true,
                    'x-is-list-container': false,
                  },
                  headers: [],
                  code: '200',
                  message: 'successful operation',
                  contents: [],
                  examples: [],
                  dataType: 'Map<String, Integer>',
                  baseType: 'Map',
                  containerType: 'map',
                  schema: {
                    type: 'object',
                    additionalProperties: {
                      type: 'integer',
                      format: 'int32',
                    },
                    'x-content-type': 'application/json',
                  },
                  jsonSchema:
                    '{\n  "description" : "successful operation",\n  "content" : {\n    "application/json" : {\n      "schema" : {\n        "type" : "object",\n        "additionalProperties" : {\n          "type" : "integer",\n          "format" : "int32"\n        },\n        "x-content-type" : "application/json"\n      }\n    },\n    "application/xml" : {\n      "schema" : {\n        "type" : "object",\n        "additionalProperties" : {\n          "type" : "integer",\n          "format" : "int32"\n        }\n      }\n    }\n  }\n}',
                  primitiveType: false,
                  wildcard: false,
                  simpleType: false,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: true,
                  isMapContainer: true,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: false,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              imports: ['Map'],
              examples: [
                {
                  contentType: 'application/json',
                  example: '{\n  "key" : 0\n}',
                },
              ],
              nickname: 'getInventory',
              operationIdLowerCase: 'getinventory',
              operationIdCamelCase: 'GetInventory',
              operationIdSnakeCase: 'get_inventory',
              isRestfulShow: false,
              isRestfulIndex: false,
              isRestfulCreate: false,
              isRestfulUpdate: false,
              isRestfulDestroy: false,
              isRestful: false,
              hasBodyParam: false,
              isDeprecated: false,
              hasAuthMethods: true,
              hasConsumes: false,
              hasProduces: true,
              hasParams: false,
              hasOptionalParams: false,
              hasRequiredParams: false,
              hasReference: false,
              hasQueryParams: false,
              hasHeaderParams: false,
              hasCookieParams: false,
              hasPathParams: false,
              hasFormParams: false,
              hasExamples: true,
              isBodyAllowed: false,
              isInteger: false,
              isNumber: false,
              hasHeaders: false,
              isString: false,
              isNumeric: false,
              isLong: false,
              isFloat: false,
              isDouble: false,
              isByteArray: false,
              isBoolean: false,
              isDate: false,
              isDateTime: false,
              isUuid: false,
              isDefault: false,
              isMapContainer: true,
              isListContainer: false,
              isMultipart: false,
              isResponseBinary: false,
              isResponseFile: false,
              isBinary: false,
              isFile: false,
              isEnum: false,
              isArrayModel: false,
              isAlias: false,
              isPrimitiveType: false,
              isObject: false,
              hasInnerObject: false,
              isContainer: false,
              isNotContainer: false,
              isReadOnly: false,
              isNullable: false,
              isCollectionFormatMulti: false,
              hasMore: false,
            },
            {
              vendorExtensions: {
                'x-has-consumes': false,
                'x-accepts': 'application/json',
                'x-has-required-params': true,
                'x-is-restful-show': false,
                'x-is-get-method': true,
                'x-has-reference': true,
                'x-is-restful-index': false,
                'x-is-restful-destroy': false,
                'x-has-params': true,
                'x-has-optional-params': false,
                'x-is-restful': false,
                'x-is-restful-update': false,
                'x-has-produces': true,
                'x-is-restful-create': false,
              },
              responseHeaders: [],
              returnTypeIsPrimitive: false,
              returnSimpleType: true,
              subresourceOperation: false,
              path: '/store/order/{orderId}',
              operationId: 'getOrderById',
              returnType: 'Order',
              httpMethod: 'GET',
              returnBaseType: 'Order',
              summary: 'Find purchase order by ID',
              unescapedNotes:
                'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions',
              notes:
                'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions',
              baseName: 'Store',
              defaultResponse: 'null',
              testPath: '/store/order/orderId_example',
              produces: [
                {
                  hasMore: 'true',
                  mediaType: 'application/json',
                },
                {
                  mediaType: 'application/xml',
                },
              ],
              contents: [
                {
                  parameters: [
                    {
                      vendorExtensions: {
                        'x-is-nullable': false,
                        'x-is-primitive-type': true,
                        'x-is-path-param': true,
                        'x-has-more': false,
                        'x-is-string': true,
                      },
                      secondaryParam: false,
                      baseName: 'orderId',
                      paramName: 'orderId',
                      dataType: 'String',
                      description: 'ID of pet that needs to be fetched',
                      unescapedDescription: 'ID of pet that needs to be fetched',
                      example: '"orderId_example"',
                      testExample: 'orderId_example',
                      jsonSchema:
                        '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of pet that needs to be fetched",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                      nullable: false,
                      isJson: false,
                      required: true,
                      exclusiveMaximum: false,
                      exclusiveMinimum: false,
                      uniqueItems: false,
                      isFormParam: false,
                      isQueryParam: false,
                      isPathParam: true,
                      isHeaderParam: false,
                      isCookieParam: false,
                      isBodyParam: false,
                      notFile: true,
                      isInteger: false,
                      isNumber: false,
                      hasHeaders: false,
                      isString: true,
                      isNumeric: false,
                      isLong: false,
                      isFloat: false,
                      isDouble: false,
                      isByteArray: false,
                      isBoolean: false,
                      isDate: false,
                      isDateTime: false,
                      isUuid: false,
                      isDefault: false,
                      isMapContainer: false,
                      isListContainer: false,
                      isMultipart: false,
                      isResponseBinary: false,
                      isResponseFile: false,
                      isBinary: false,
                      isFile: false,
                      isEnum: false,
                      isArrayModel: false,
                      isAlias: false,
                      isPrimitiveType: true,
                      isObject: false,
                      hasInnerObject: false,
                      isContainer: false,
                      isNotContainer: false,
                      isReadOnly: false,
                      isNullable: false,
                      isCollectionFormatMulti: false,
                      hasMore: false,
                    },
                  ],
                  contentExtensions: {},
                  isForm: false,
                },
              ],
              allParams: [
                {
                  vendorExtensions: {
                    'x-is-nullable': false,
                    'x-is-primitive-type': true,
                    'x-is-path-param': true,
                    'x-has-more': false,
                    'x-is-string': true,
                  },
                  secondaryParam: false,
                  baseName: 'orderId',
                  paramName: 'orderId',
                  dataType: 'String',
                  description: 'ID of pet that needs to be fetched',
                  unescapedDescription: 'ID of pet that needs to be fetched',
                  example: '"orderId_example"',
                  testExample: 'orderId_example',
                  jsonSchema:
                    '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of pet that needs to be fetched",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                  nullable: false,
                  isJson: false,
                  required: true,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: true,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: false,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: true,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              bodyParams: [],
              pathParams: [
                {
                  vendorExtensions: {
                    'x-has-more': false,
                    'x-is-nullable': false,
                    'x-is-string': true,
                    'x-is-primitive-type': true,
                    'x-is-path-param': true,
                  },
                  secondaryParam: false,
                  baseName: 'orderId',
                  paramName: 'orderId',
                  dataType: 'String',
                  description: 'ID of pet that needs to be fetched',
                  unescapedDescription: 'ID of pet that needs to be fetched',
                  example: '"orderId_example"',
                  testExample: 'orderId_example',
                  jsonSchema:
                    '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of pet that needs to be fetched",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                  nullable: false,
                  isJson: false,
                  required: true,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: true,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: false,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: true,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              queryParams: [],
              headerParams: [],
              cookieParams: [],
              formParams: [],
              requiredParams: [
                {
                  vendorExtensions: {
                    'x-has-more': false,
                    'x-is-nullable': false,
                    'x-is-string': true,
                    'x-is-primitive-type': true,
                    'x-is-path-param': true,
                  },
                  secondaryParam: false,
                  baseName: 'orderId',
                  paramName: 'orderId',
                  dataType: 'String',
                  description: 'ID of pet that needs to be fetched',
                  unescapedDescription: 'ID of pet that needs to be fetched',
                  example: '"orderId_example"',
                  testExample: 'orderId_example',
                  jsonSchema:
                    '{\n  "name" : "orderId",\n  "in" : "path",\n  "description" : "ID of pet that needs to be fetched",\n  "required" : true,\n  "style" : "simple",\n  "explode" : false,\n  "schema" : {\n    "type" : "string"\n  }\n}',
                  nullable: false,
                  isJson: false,
                  required: true,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: true,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: false,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: true,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              tags: [
                {
                  name: 'store',
                },
              ],
              responses: [
                {
                  vendorExtensions: {
                    'x-has-headers': false,
                    'x-is-primitive-type': false,
                    'x-has-more': true,
                    'x-is-simple-type': true,
                    'x-is-default': true,
                  },
                  headers: [],
                  code: '200',
                  message: 'successful operation',
                  contents: [],
                  examples: [],
                  dataType: 'Order',
                  baseType: 'Order',
                  schema: {
                    $ref: '#/components/schemas/Order',
                  },
                  jsonSchema:
                    '{\n  "description" : "successful operation",\n  "content" : {\n    "application/json" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    },\n    "application/xml" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    }\n  }\n}',
                  primitiveType: false,
                  wildcard: false,
                  simpleType: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: true,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: false,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: true,
                },
                {
                  vendorExtensions: {
                    'x-is-map-container': false,
                    'x-has-headers': false,
                    'x-is-primitive-type': true,
                    'x-has-more': true,
                    'x-is-simple-type': true,
                    'x-is-default': false,
                    'x-is-list-container': false,
                  },
                  headers: [],
                  code: '400',
                  message: 'Invalid ID supplied',
                  contents: [],
                  jsonSchema: '{\n  "description" : "Invalid ID supplied"\n}',
                  primitiveType: true,
                  wildcard: false,
                  simpleType: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: true,
                },
                {
                  vendorExtensions: {
                    'x-is-map-container': false,
                    'x-has-headers': false,
                    'x-is-primitive-type': true,
                    'x-has-more': false,
                    'x-is-simple-type': true,
                    'x-is-default': false,
                    'x-is-list-container': false,
                  },
                  headers: [],
                  code: '404',
                  message: 'Order not found',
                  contents: [],
                  jsonSchema: '{\n  "description" : "Order not found"\n}',
                  primitiveType: true,
                  wildcard: false,
                  simpleType: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              imports: ['Order'],
              examples: [
                {
                  contentType: 'application/json',
                  example:
                    '{\n  "petId" : 6,\n  "quantity" : 1,\n  "id" : 0,\n  "shipDate" : "2000-01-23T04:56:07.000+00:00",\n  "complete" : true,\n  "status" : "placed"\n}',
                },
              ],
              nickname: 'getOrderById',
              operationIdLowerCase: 'getorderbyid',
              operationIdCamelCase: 'GetOrderById',
              operationIdSnakeCase: 'get_order_by_id',
              isRestfulShow: false,
              isRestfulIndex: false,
              isRestfulCreate: false,
              isRestfulUpdate: false,
              isRestfulDestroy: false,
              isRestful: false,
              hasBodyParam: false,
              isDeprecated: false,
              hasAuthMethods: false,
              hasConsumes: false,
              hasProduces: true,
              hasParams: true,
              hasOptionalParams: false,
              hasRequiredParams: true,
              hasReference: true,
              hasQueryParams: false,
              hasHeaderParams: false,
              hasCookieParams: false,
              hasPathParams: true,
              hasFormParams: false,
              hasExamples: true,
              isBodyAllowed: false,
              isInteger: false,
              isNumber: false,
              hasHeaders: false,
              isString: false,
              isNumeric: false,
              isLong: false,
              isFloat: false,
              isDouble: false,
              isByteArray: false,
              isBoolean: false,
              isDate: false,
              isDateTime: false,
              isUuid: false,
              isDefault: false,
              isMapContainer: false,
              isListContainer: false,
              isMultipart: false,
              isResponseBinary: false,
              isResponseFile: false,
              isBinary: false,
              isFile: false,
              isEnum: false,
              isArrayModel: false,
              isAlias: false,
              isPrimitiveType: false,
              isObject: false,
              hasInnerObject: false,
              isContainer: false,
              isNotContainer: false,
              isReadOnly: false,
              isNullable: false,
              isCollectionFormatMulti: false,
              hasMore: false,
            },
            {
              vendorExtensions: {
                'x-has-consumes': true,
                'x-accepts': 'application/json',
                'x-has-required-params': false,
                'x-is-restful-show': false,
                'x-has-reference': true,
                'x-is-restful-index': false,
                'x-is-restful-destroy': false,
                'x-has-more': false,
                'x-has-params': true,
                'x-is-post-method': true,
                'x-contentType': '*/*',
                'x-has-optional-params': true,
                'x-is-restful': false,
                'x-is-restful-update': false,
                'x-has-produces': true,
                'x-is-restful-create': false,
              },
              responseHeaders: [],
              returnTypeIsPrimitive: false,
              returnSimpleType: true,
              subresourceOperation: false,
              path: '/store/order',
              operationId: 'placeOrder',
              returnType: 'Order',
              httpMethod: 'POST',
              returnBaseType: 'Order',
              summary: 'Place an order for a pet',
              baseName: 'Store',
              defaultResponse: 'null',
              testPath: '/store/order',
              consumes: [
                {
                  mediaType: '*/*',
                },
              ],
              produces: [
                {
                  hasMore: 'true',
                  mediaType: 'application/json',
                },
                {
                  mediaType: 'application/xml',
                },
              ],
              bodyParam: {
                vendorExtensions: {
                  'x-is-body-param': true,
                  'x-has-more': false,
                },
                secondaryParam: false,
                baseName: 'body',
                paramName: 'body',
                dataType: 'Order',
                description: 'order placed for purchasing the pet',
                unescapedDescription: 'order placed for purchasing the pet',
                baseType: 'Order',
                example: 'new Order()',
                testExample: 'new Order()',
                jsonSchema:
                  '{\n  "description" : "order placed for purchasing the pet",\n  "content" : {\n    "*/*" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    }\n  },\n  "required" : false\n}',
                nullable: false,
                isJson: false,
                required: false,
                exclusiveMaximum: false,
                exclusiveMinimum: false,
                uniqueItems: false,
                isFormParam: false,
                isQueryParam: false,
                isPathParam: false,
                isHeaderParam: false,
                isCookieParam: false,
                isBodyParam: true,
                notFile: true,
                isInteger: false,
                isNumber: false,
                hasHeaders: false,
                isString: false,
                isNumeric: false,
                isLong: false,
                isFloat: false,
                isDouble: false,
                isByteArray: false,
                isBoolean: false,
                isDate: false,
                isDateTime: false,
                isUuid: false,
                isDefault: false,
                isMapContainer: false,
                isListContainer: false,
                isMultipart: false,
                isResponseBinary: false,
                isResponseFile: false,
                isBinary: false,
                isFile: false,
                isEnum: false,
                isArrayModel: false,
                isAlias: false,
                isPrimitiveType: false,
                isObject: false,
                hasInnerObject: false,
                isContainer: false,
                isNotContainer: false,
                isReadOnly: false,
                isNullable: false,
                isCollectionFormatMulti: false,
                hasMore: false,
              },
              contents: [
                {
                  contentType: '*/*',
                  parameters: [
                    {
                      vendorExtensions: {
                        'x-has-more': false,
                        'x-is-body-param': true,
                      },
                      secondaryParam: false,
                      baseName: 'body',
                      paramName: 'body',
                      dataType: 'Order',
                      description: 'order placed for purchasing the pet',
                      unescapedDescription: 'order placed for purchasing the pet',
                      baseType: 'Order',
                      example: 'new Order()',
                      testExample: 'new Order()',
                      jsonSchema:
                        '{\n  "description" : "order placed for purchasing the pet",\n  "content" : {\n    "*/*" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    }\n  },\n  "required" : false\n}',
                      nullable: false,
                      isJson: false,
                      required: false,
                      exclusiveMaximum: false,
                      exclusiveMinimum: false,
                      uniqueItems: false,
                      isFormParam: false,
                      isQueryParam: false,
                      isPathParam: false,
                      isHeaderParam: false,
                      isCookieParam: false,
                      isBodyParam: true,
                      notFile: true,
                      isInteger: false,
                      isNumber: false,
                      hasHeaders: false,
                      isString: false,
                      isNumeric: false,
                      isLong: false,
                      isFloat: false,
                      isDouble: false,
                      isByteArray: false,
                      isBoolean: false,
                      isDate: false,
                      isDateTime: false,
                      isUuid: false,
                      isDefault: false,
                      isMapContainer: false,
                      isListContainer: false,
                      isMultipart: false,
                      isResponseBinary: false,
                      isResponseFile: false,
                      isBinary: false,
                      isFile: false,
                      isEnum: false,
                      isArrayModel: false,
                      isAlias: false,
                      isPrimitiveType: false,
                      isObject: false,
                      hasInnerObject: false,
                      isContainer: false,
                      isNotContainer: false,
                      isReadOnly: false,
                      isNullable: false,
                      isCollectionFormatMulti: false,
                      hasMore: false,
                    },
                  ],
                  contentExtensions: {
                    'x-is-form': false,
                  },
                  isForm: false,
                },
              ],
              allParams: [
                {
                  vendorExtensions: {
                    'x-is-body-param': true,
                    'x-has-more': false,
                  },
                  secondaryParam: false,
                  baseName: 'body',
                  paramName: 'body',
                  dataType: 'Order',
                  description: 'order placed for purchasing the pet',
                  unescapedDescription: 'order placed for purchasing the pet',
                  baseType: 'Order',
                  example: 'new Order()',
                  testExample: 'new Order()',
                  jsonSchema:
                    '{\n  "description" : "order placed for purchasing the pet",\n  "content" : {\n    "*/*" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    }\n  },\n  "required" : false\n}',
                  nullable: false,
                  isJson: false,
                  required: false,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: false,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: true,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: false,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              bodyParams: [
                {
                  vendorExtensions: {
                    'x-has-more': false,
                    'x-is-body-param': true,
                  },
                  secondaryParam: false,
                  baseName: 'body',
                  paramName: 'body',
                  dataType: 'Order',
                  description: 'order placed for purchasing the pet',
                  unescapedDescription: 'order placed for purchasing the pet',
                  baseType: 'Order',
                  example: 'new Order()',
                  testExample: 'new Order()',
                  jsonSchema:
                    '{\n  "description" : "order placed for purchasing the pet",\n  "content" : {\n    "*/*" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    }\n  },\n  "required" : false\n}',
                  nullable: false,
                  isJson: false,
                  required: false,
                  exclusiveMaximum: false,
                  exclusiveMinimum: false,
                  uniqueItems: false,
                  isFormParam: false,
                  isQueryParam: false,
                  isPathParam: false,
                  isHeaderParam: false,
                  isCookieParam: false,
                  isBodyParam: true,
                  notFile: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: false,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              pathParams: [],
              queryParams: [],
              headerParams: [],
              cookieParams: [],
              formParams: [],
              requiredParams: [],
              tags: [
                {
                  name: 'store',
                },
              ],
              responses: [
                {
                  vendorExtensions: {
                    'x-has-headers': false,
                    'x-is-primitive-type': false,
                    'x-has-more': true,
                    'x-is-simple-type': true,
                    'x-is-default': true,
                  },
                  headers: [],
                  code: '200',
                  message: 'successful operation',
                  contents: [],
                  examples: [],
                  dataType: 'Order',
                  baseType: 'Order',
                  schema: {
                    $ref: '#/components/schemas/Order',
                  },
                  jsonSchema:
                    '{\n  "description" : "successful operation",\n  "content" : {\n    "application/json" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    },\n    "application/xml" : {\n      "schema" : {\n        "$ref" : "#/components/schemas/Order"\n      }\n    }\n  }\n}',
                  primitiveType: false,
                  wildcard: false,
                  simpleType: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: true,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: false,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: true,
                },
                {
                  vendorExtensions: {
                    'x-is-map-container': false,
                    'x-has-headers': false,
                    'x-is-primitive-type': true,
                    'x-has-more': false,
                    'x-is-simple-type': true,
                    'x-is-default': false,
                    'x-is-list-container': false,
                  },
                  headers: [],
                  code: '400',
                  message: 'Invalid Order',
                  contents: [],
                  jsonSchema: '{\n  "description" : "Invalid Order"\n}',
                  primitiveType: true,
                  wildcard: false,
                  simpleType: true,
                  isInteger: false,
                  isNumber: false,
                  hasHeaders: false,
                  isString: false,
                  isNumeric: false,
                  isLong: false,
                  isFloat: false,
                  isDouble: false,
                  isByteArray: false,
                  isBoolean: false,
                  isDate: false,
                  isDateTime: false,
                  isUuid: false,
                  isDefault: false,
                  isMapContainer: false,
                  isListContainer: false,
                  isMultipart: false,
                  isResponseBinary: false,
                  isResponseFile: false,
                  isBinary: false,
                  isFile: false,
                  isEnum: false,
                  isArrayModel: false,
                  isAlias: false,
                  isPrimitiveType: true,
                  isObject: false,
                  hasInnerObject: false,
                  isContainer: false,
                  isNotContainer: false,
                  isReadOnly: false,
                  isNullable: false,
                  isCollectionFormatMulti: false,
                  hasMore: false,
                },
              ],
              imports: ['Order'],
              examples: [
                {
                  contentType: 'application/json',
                  example:
                    '{\n  "petId" : 6,\n  "quantity" : 1,\n  "id" : 0,\n  "shipDate" : "2000-01-23T04:56:07.000+00:00",\n  "complete" : true,\n  "status" : "placed"\n}',
                },
              ],
              nickname: 'placeOrder',
              operationIdLowerCase: 'placeorder',
              operationIdCamelCase: 'PlaceOrder',
              operationIdSnakeCase: 'place_order',
              isRestfulShow: false,
              isRestfulIndex: false,
              isRestfulCreate: false,
              isRestfulUpdate: false,
              isRestfulDestroy: false,
              isRestful: false,
              hasBodyParam: true,
              isDeprecated: false,
              hasAuthMethods: false,
              hasConsumes: true,
              hasProduces: true,
              hasParams: true,
              hasOptionalParams: true,
              hasRequiredParams: false,
              hasReference: true,
              hasQueryParams: false,
              hasHeaderParams: false,
              hasCookieParams: false,
              hasPathParams: false,
              hasFormParams: false,
              hasExamples: true,
              isBodyAllowed: true,
              isInteger: false,
              isNumber: false,
              hasHeaders: false,
              isString: false,
              isNumeric: false,
              isLong: false,
              isFloat: false,
              isDouble: false,
              isByteArray: false,
              isBoolean: false,
              isDate: false,
              isDateTime: false,
              isUuid: false,
              isDefault: false,
              isMapContainer: false,
              isListContainer: false,
              isMultipart: false,
              isResponseBinary: false,
              isResponseFile: false,
              isBinary: false,
              isFile: false,
              isEnum: false,
              isArrayModel: false,
              isAlias: false,
              isPrimitiveType: false,
              isObject: false,
              hasInnerObject: false,
              isContainer: false,
              isNotContainer: false,
              isReadOnly: false,
              isNullable: false,
              isCollectionFormatMulti: false,
              hasMore: false,
            },
          ],
          pathPrefix: 'store',
        },
        jackson: 'true',
        java8: false,
        threetenbp: 'true',
        artifactId: 'swagger-petstore-jersey2',
        artifactDescription: 'Swagger Java',
        hideGenerationTimestamp: false,
        developerName: 'Swagger',
        scmConnection: 'scm:git:git@github.com:swagger-api/swagger-codegen.git',
        unescapedAppDescription:
          'This is a sample server Petstore server.  You can find out more about Swagger at <a href="http://swagger.io">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key "special-key" to test the authorization filters',
        artifactVersion: '1.0.0',
        appName: 'Swagger Petstore',
        generateApiDocs: true,
        termsOfService: 'http://helloreverb.com/terms/',
        generatorVersion: 'unset',
        useRuntimeException: true,
        gitRepoBaseURL: 'https://github.com',
        apiPackage: 'io.swagger.client.api',
        scmUrl: 'https://github.com/swagger-api/swagger-codegen',
        basePath: 'http://petstore.swagger.io/v2',
        classname: 'StoreApi',
        gitRepoId: 'GIT_REPO_ID',
        generatedDate: '2024-01-19T13:54:28.531334+01:00[Europe/Rome]',
        infoEmail: 'apiteam@wordnik.com',
        gitUserId: 'GIT_USER_ID',
      },
    ],
  },
  modelDocPath: 'docs/',
  useOas2: false,
  withXml: false,
  scmDeveloperConnection: 'scm:git:git@github.com:swagger-api/swagger-codegen.git',
  licenseUrl: 'http://www.apache.org/licenses/LICENSE-2.0.html',
  jsr310: 'true',
  generatedYear: '2024',
  modelPackage: 'io.swagger.client.model',
  openAPI: {
    openapi: '3.0.0',
    info: {
      title: 'Swagger Petstore',
      description:
        'This is a sample server Petstore server.  You can find out more about Swagger at <a href="http://swagger.io">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key "special-key" to test the authorization filters',
      termsOfService: 'http://helloreverb.com/terms/',
      contact: {
        email: 'apiteam@wordnik.com',
      },
      license: {
        name: 'Apache-2.0',
        url: 'http://www.apache.org/licenses/LICENSE-2.0.html',
      },
      version: '1.0.0',
    },
    servers: [
      {
        url: 'http://petstore.swagger.io/v2',
      },
    ],
    paths: {
      '/pet': {
        put: {
          tags: ['pet'],
          summary: 'Update an existing pet',
          operationId: 'updatePet',
          requestBody: {
            description: 'Pet object that needs to be added to the store',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/Pet',
                },
              },
              'application/xml': {
                schema: {
                  $ref: '#/components/schemas/Pet',
                },
              },
            },
            required: false,
          },
          responses: {
            400: {
              description: 'Invalid ID supplied',
            },
            404: {
              description: 'Pet not found',
            },
            405: {
              description: 'Validation exception',
            },
          },
          security: [
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-contentType': 'application/json',
          'x-accepts': '',
        },
        post: {
          tags: ['pet'],
          summary: 'Add a new pet to the store',
          operationId: 'addPet',
          requestBody: {
            description: 'Pet object that needs to be added to the store',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/Pet',
                },
              },
              'application/xml': {
                schema: {
                  $ref: '#/components/schemas/Pet',
                },
              },
            },
            required: false,
          },
          responses: {
            405: {
              description: 'Invalid input',
            },
          },
          security: [
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-contentType': 'application/json',
          'x-accepts': '',
        },
      },
      '/pet/findByStatus': {
        get: {
          tags: ['pet'],
          summary: 'Finds Pets by status',
          description: 'Multiple status values can be provided with comma separated strings',
          operationId: 'findPetsByStatus',
          parameters: [
            {
              name: 'status',
              in: 'query',
              description: 'Status values that need to be considered for filter',
              required: false,
              style: 'form',
              explode: true,
              schema: {
                type: 'array',
                items: {
                  type: 'string',
                  enum: ['available', 'pending', 'sold'],
                },
              },
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      $ref: '#/components/schemas/Pet',
                    },
                    'x-content-type': 'application/json',
                  },
                },
                'application/xml': {
                  schema: {
                    type: 'array',
                    items: {
                      $ref: '#/components/schemas/Pet',
                    },
                  },
                },
              },
            },
            400: {
              description: 'Invalid status value',
            },
          },
          security: [
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-accepts': 'application/json',
        },
      },
      '/pet/findByTags': {
        get: {
          tags: ['pet'],
          summary: 'Finds Pets by tags',
          description:
            'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
          operationId: 'findPetsByTags',
          parameters: [
            {
              name: 'tags',
              in: 'query',
              description: 'Tags to filter by',
              required: false,
              style: 'form',
              explode: true,
              schema: {
                type: 'array',
                items: {
                  type: 'string',
                },
              },
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      $ref: '#/components/schemas/Pet',
                    },
                    'x-content-type': 'application/json',
                  },
                },
                'application/xml': {
                  schema: {
                    type: 'array',
                    items: {
                      $ref: '#/components/schemas/Pet',
                    },
                  },
                },
              },
            },
            400: {
              description: 'Invalid tag value',
            },
          },
          deprecated: true,
          security: [
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-accepts': 'application/json',
        },
      },
      '/pet/{petId}': {
        get: {
          tags: ['pet'],
          summary: 'Find pet by ID',
          description:
            'Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions',
          operationId: 'getPetById',
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet that needs to be fetched',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'integer',
                format: 'int64',
              },
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    $ref: '#/components/schemas/Pet',
                  },
                },
                'application/xml': {
                  schema: {
                    $ref: '#/components/schemas/Pet',
                  },
                },
              },
            },
            400: {
              description: 'Invalid ID supplied',
            },
            404: {
              description: 'Pet not found',
            },
          },
          security: [
            {
              api_key: [],
            },
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-accepts': 'application/json',
        },
        post: {
          tags: ['pet'],
          summary: 'Updates a pet in the store with form data',
          operationId: 'updatePetWithForm',
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet that needs to be updated',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'string',
              },
            },
          ],
          requestBody: {
            content: {
              'application/x-www-form-urlencoded': {
                schema: {
                  $ref: '#/components/schemas/pet_petId_body',
                },
              },
            },
          },
          responses: {
            405: {
              description: 'Invalid input',
            },
          },
          security: [
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-contentType': 'application/x-www-form-urlencoded',
          'x-accepts': '',
        },
        delete: {
          tags: ['pet'],
          summary: 'Deletes a pet',
          operationId: 'deletePet',
          parameters: [
            {
              name: 'api_key',
              in: 'header',
              required: false,
              style: 'simple',
              explode: false,
              schema: {
                type: 'string',
              },
            },
            {
              name: 'petId',
              in: 'path',
              description: 'Pet id to delete',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'integer',
                format: 'int64',
              },
            },
          ],
          responses: {
            400: {
              description: 'Invalid pet value',
            },
          },
          security: [
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-contentType': 'application/json',
          'x-accepts': '',
        },
      },
      '/pet/{petId}/uploadImage': {
        post: {
          tags: ['pet'],
          summary: 'uploads an image',
          operationId: 'uploadFile',
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet to update',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'integer',
                format: 'int64',
              },
            },
          ],
          requestBody: {
            content: {
              'multipart/form-data': {
                schema: {
                  $ref: '#/components/schemas/petId_uploadImage_body',
                },
              },
            },
          },
          responses: {
            default: {
              description: 'successful operation',
            },
          },
          security: [
            {
              petstore_auth: ['write:pets', 'read:pets'],
            },
          ],
          'x-contentType': 'multipart/form-data',
          'x-accepts': '',
        },
      },
      '/store/inventory': {
        get: {
          tags: ['store'],
          summary: 'Returns pet inventories by status',
          description: 'Returns a map of status codes to quantities',
          operationId: 'getInventory',
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    additionalProperties: {
                      type: 'integer',
                      format: 'int32',
                    },
                    'x-content-type': 'application/json',
                  },
                },
                'application/xml': {
                  schema: {
                    type: 'object',
                    additionalProperties: {
                      type: 'integer',
                      format: 'int32',
                    },
                  },
                },
              },
            },
          },
          security: [
            {
              api_key: [],
            },
          ],
          'x-accepts': 'application/json',
        },
      },
      '/store/order': {
        post: {
          tags: ['store'],
          summary: 'Place an order for a pet',
          operationId: 'placeOrder',
          requestBody: {
            description: 'order placed for purchasing the pet',
            content: {
              '*/*': {
                schema: {
                  $ref: '#/components/schemas/Order',
                },
              },
            },
            required: false,
          },
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    $ref: '#/components/schemas/Order',
                  },
                },
                'application/xml': {
                  schema: {
                    $ref: '#/components/schemas/Order',
                  },
                },
              },
            },
            400: {
              description: 'Invalid Order',
            },
          },
          'x-contentType': '*/*',
          'x-accepts': 'application/json',
        },
      },
      '/store/order/{orderId}': {
        get: {
          tags: ['store'],
          summary: 'Find purchase order by ID',
          description:
            'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions',
          operationId: 'getOrderById',
          parameters: [
            {
              name: 'orderId',
              in: 'path',
              description: 'ID of pet that needs to be fetched',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'string',
              },
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    $ref: '#/components/schemas/Order',
                  },
                },
                'application/xml': {
                  schema: {
                    $ref: '#/components/schemas/Order',
                  },
                },
              },
            },
            400: {
              description: 'Invalid ID supplied',
            },
            404: {
              description: 'Order not found',
            },
          },
          'x-accepts': 'application/json',
        },
        delete: {
          tags: ['store'],
          summary: 'Delete purchase order by ID',
          description:
            'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors',
          operationId: 'deleteOrder',
          parameters: [
            {
              name: 'orderId',
              in: 'path',
              description: 'ID of the order that needs to be deleted',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'string',
              },
            },
          ],
          responses: {
            400: {
              description: 'Invalid ID supplied',
            },
            404: {
              description: 'Order not found',
            },
          },
          'x-contentType': 'application/json',
          'x-accepts': '',
        },
      },
      '/user': {
        post: {
          tags: ['user'],
          summary: 'Create user',
          description: 'This can only be done by the logged in user.',
          operationId: 'createUser',
          requestBody: {
            description: 'Created user object',
            content: {
              '*/*': {
                schema: {
                  $ref: '#/components/schemas/User',
                },
              },
            },
            required: false,
          },
          responses: {
            default: {
              description: 'successful operation',
            },
          },
          'x-contentType': '*/*',
          'x-accepts': '',
        },
      },
      '/user/createWithArray': {
        post: {
          tags: ['user'],
          summary: 'Creates list of users with given input array',
          operationId: 'createUsersWithArrayInput',
          requestBody: {
            description: 'List of user object',
            content: {
              '*/*': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/User',
                  },
                },
              },
            },
            required: false,
          },
          responses: {
            default: {
              description: 'successful operation',
            },
          },
          'x-contentType': '*/*',
          'x-accepts': '',
        },
      },
      '/user/createWithList': {
        post: {
          tags: ['user'],
          summary: 'Creates list of users with given input array',
          operationId: 'createUsersWithListInput',
          requestBody: {
            description: 'List of user object',
            content: {
              '*/*': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/User',
                  },
                },
              },
            },
            required: false,
          },
          responses: {
            default: {
              description: 'successful operation',
            },
          },
          'x-contentType': '*/*',
          'x-accepts': '',
        },
      },
      '/user/login': {
        get: {
          tags: ['user'],
          summary: 'Logs user into the system',
          operationId: 'loginUser',
          parameters: [
            {
              name: 'username',
              in: 'query',
              description: 'The user name for login',
              required: false,
              style: 'form',
              explode: true,
              schema: {
                type: 'string',
              },
            },
            {
              name: 'password',
              in: 'query',
              description: 'The password for login in clear text',
              required: false,
              style: 'form',
              explode: true,
              schema: {
                type: 'string',
              },
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    type: 'string',
                    'x-content-type': 'application/json',
                  },
                },
                'application/xml': {
                  schema: {
                    type: 'string',
                  },
                },
              },
            },
            400: {
              description: 'Invalid username/password supplied',
            },
          },
          'x-accepts': 'application/json',
        },
      },
      '/user/logout': {
        get: {
          tags: ['user'],
          summary: 'Logs out current logged in user session',
          operationId: 'logoutUser',
          responses: {
            default: {
              description: 'successful operation',
            },
          },
          'x-accepts': '',
        },
      },
      '/user/{username}': {
        get: {
          tags: ['user'],
          summary: 'Get user by user name',
          operationId: 'getUserByName',
          parameters: [
            {
              name: 'username',
              in: 'path',
              description: 'The name that needs to be fetched. Use user1 for testing. ',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'string',
              },
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              content: {
                'application/json': {
                  schema: {
                    $ref: '#/components/schemas/User',
                  },
                },
                'application/xml': {
                  schema: {
                    $ref: '#/components/schemas/User',
                  },
                },
              },
            },
            400: {
              description: 'Invalid username supplied',
            },
            404: {
              description: 'User not found',
            },
          },
          'x-accepts': 'application/json',
        },
        put: {
          tags: ['user'],
          summary: 'Updated user',
          description: 'This can only be done by the logged in user.',
          operationId: 'updateUser',
          parameters: [
            {
              name: 'username',
              in: 'path',
              description: 'name that need to be deleted',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'string',
              },
            },
          ],
          requestBody: {
            description: 'Updated user object',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/User',
                },
              },
              'application/xml': {
                schema: {
                  $ref: '#/components/schemas/User',
                },
              },
            },
            required: false,
          },
          responses: {
            400: {
              description: 'Invalid user supplied',
            },
            404: {
              description: 'User not found',
            },
          },
          'x-contentType': 'application/json',
          'x-accepts': '',
        },
        delete: {
          tags: ['user'],
          summary: 'Delete user',
          description: 'This can only be done by the logged in user.',
          operationId: 'deleteUser',
          parameters: [
            {
              name: 'username',
              in: 'path',
              description: 'The name that needs to be deleted',
              required: true,
              style: 'simple',
              explode: false,
              schema: {
                type: 'string',
              },
            },
          ],
          responses: {
            400: {
              description: 'Invalid username supplied',
            },
            404: {
              description: 'User not found',
            },
          },
          'x-contentType': 'application/json',
          'x-accepts': '',
        },
      },
    },
    components: {
      schemas: {
        Order: {
          properties: {
            id: {
              type: 'integer',
              format: 'int64',
            },
            petId: {
              type: 'integer',
              format: 'int64',
            },
            quantity: {
              type: 'integer',
              format: 'int32',
            },
            shipDate: {
              type: 'string',
              format: 'date-time',
            },
            status: {
              type: 'string',
              description: 'Order Status',
              enum: ['placed', 'approved', 'delivered'],
            },
            complete: {
              type: 'boolean',
            },
          },
          example: {
            petId: 6,
            quantity: 1,
            id: 0,
            shipDate: '2000-01-23T04:56:07.000+00:00',
            complete: true,
            status: 'placed',
          },
          xml: {
            name: 'Order',
          },
        },
        User: {
          properties: {
            id: {
              type: 'integer',
              format: 'int64',
            },
            username: {
              type: 'string',
            },
            firstName: {
              type: 'string',
            },
            lastName: {
              type: 'string',
            },
            email: {
              type: 'string',
            },
            password: {
              type: 'string',
            },
            phone: {
              type: 'string',
            },
            userStatus: {
              type: 'integer',
              description: 'User Status',
              format: 'int32',
            },
          },
          example: {
            firstName: 'firstName',
            lastName: 'lastName',
            password: 'password',
            userStatus: 6,
            phone: 'phone',
            id: 0,
            email: 'email',
            username: 'username',
          },
          xml: {
            name: 'User',
          },
        },
        Category: {
          properties: {
            id: {
              type: 'integer',
              format: 'int64',
            },
            name: {
              type: 'string',
            },
          },
          example: {
            name: 'name',
            id: 6,
          },
          xml: {
            name: 'Category',
          },
        },
        Tag: {
          properties: {
            id: {
              type: 'integer',
              format: 'int64',
            },
            name: {
              type: 'string',
            },
          },
          example: {
            name: 'name',
            id: 1,
          },
          xml: {
            name: 'Tag',
          },
        },
        Pet: {
          required: ['name', 'photoUrls'],
          properties: {
            id: {
              type: 'integer',
              format: 'int64',
            },
            category: {
              $ref: '#/components/schemas/Category',
            },
            name: {
              type: 'string',
            },
            photoUrls: {
              type: 'array',
              xml: {
                name: 'photoUrl',
                wrapped: true,
              },
              items: {
                type: 'string',
              },
            },
            tags: {
              type: 'array',
              xml: {
                name: 'tag',
                wrapped: true,
              },
              items: {
                $ref: '#/components/schemas/Tag',
              },
            },
            status: {
              type: 'string',
              description: 'pet status in the store',
              enum: ['available', 'pending', 'sold'],
            },
          },
          example: {
            photoUrls: ['photoUrls', 'photoUrls'],
            name: 'name',
            id: 0,
            category: {
              name: 'name',
              id: 6,
            },
            tags: [
              {
                name: 'name',
                id: 1,
              },
              {
                name: 'name',
                id: 1,
              },
            ],
            status: 'available',
          },
          xml: {
            name: 'Pet',
          },
        },
        pet_petId_body: {
          properties: {
            name: {
              type: 'string',
              description: 'Updated name of the pet',
            },
            status: {
              type: 'string',
              description: 'Updated status of the pet',
            },
          },
        },
        petId_uploadImage_body: {
          properties: {
            additionalMetadata: {
              type: 'string',
              description: 'Additional data to pass to server',
            },
            file: {
              type: 'string',
              description: 'file to upload',
              format: 'binary',
            },
          },
        },
      },
      securitySchemes: {
        petstore_auth: {
          type: 'oauth2',
          flows: {
            implicit: {
              authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog',
              scopes: {
                'write:pets': 'modify pets in your account',
                'read:pets': 'read your pets',
              },
            },
          },
        },
        api_key: {
          type: 'apiKey',
          name: 'api_key',
          in: 'header',
        },
      },
    },
  },
  scheme: 'http',
  apiDocPath: 'docs/',
  licenseInfo: 'Apache-2.0',
  hasModel: true,
  basePathWithoutHost: '/v2',
  parcelableModel: false,
  developerOrganizationUrl: 'http://swagger.io',
  jackson: 'true',
  java8: false,
  threetenbp: 'true',
  artifactId: 'swagger-petstore-jersey2',
  artifactDescription: 'Swagger Java',
  hideGenerationTimestamp: false,
  developerName: 'Swagger',
  scmConnection: 'scm:git:git@github.com:swagger-api/swagger-codegen.git',
  unescapedAppDescription:
    'This is a sample server Petstore server.  You can find out more about Swagger at <a href="http://swagger.io">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key "special-key" to test the authorization filters',
  artifactVersion: '1.0.0',
  appName: 'Swagger Petstore',
  generateApiDocs: true,
  termsOfService: 'http://helloreverb.com/terms/',
  generatorVersion: 'unset',
  useRuntimeException: true,
  gitRepoBaseURL: 'https://github.com',
  apiPackage: 'io.swagger.client.api',
  scmUrl: 'https://github.com/swagger-api/swagger-codegen',
  basePath: 'http://petstore.swagger.io/v2',
  gitRepoId: 'GIT_REPO_ID',
  generatedDate: '2024-01-19T13:54:28.531334+01:00[Europe/Rome]',
  infoEmail: 'apiteam@wordnik.com',
  gitUserId: 'GIT_USER_ID',
};
